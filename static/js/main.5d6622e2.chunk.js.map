{"version":3,"sources":["index.js","simulation.js"],"names":["NetworkChart","props","step","newNodes","newLinks","nodes","links","margin","top","right","bottom","left","repulsivity","iterations","nodeColor","node","values","linkColor","link","nodeBorderWidth","nodeBorderColor","from","modifiers","linkThickness","motionStiffness","motionDamping","LineChart","nowStep","LineNodes","count","Negative","Neutral","Positive","d","valueset","Array","Set","map","v","j","num","i","length","Math","round","result","Object","entries","key","stepcount","id","data","x","y","xScale","type","yScale","min","max","stacked","reverse","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","MyResponsiveScatterPlot","DegNodes","filter","value","Degc","source","target","Degree","sort","a","b","slice","degreeCounts","DegNode","xFormat","e","yFormat","blendMode","format","index","toExponential","startsWith","App","positiveEl","useRef","negativeEl","percentEl","currentStep","useState","setnowStep","setStep","setData","useEffect","window","fetch","then","response","json","toString","radius","color","distance","item","weight","console","log","options","name","perOptions","handleClickEvent","percent","positiveIds","negativeIds","current","option","selected","push","newData","graph","adjacencyLists","remainPercent","node2","calc","assign","simulation","rel","href","className","multiple","ref","class","onChange","event","preventDefault","defaultValue","onClick","onSubmit","elements","width","height","render","document","querySelector"],"mappings":"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","file":"static/js/main.5d6622e2.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { ResponsiveNetwork } from \"@nivo/network\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\nimport { simulation } from \"./simulation\";\r\nimport { ResponsiveScatterPlot } from \"@nivo/scatterplot\";\r\nimport \"./index.css\";\r\n\r\n//ネットワーク図\r\nconst NetworkChart = (props) => {\r\n  const step = props.step;\r\n  const newNodes = props.newNodes;\r\n  const newLinks = props.newLinks;\r\n  return (\r\n    <ResponsiveNetwork\r\n      nodes={newNodes}\r\n      links={newLinks}\r\n      margin={{ top: 0, right: 0, bottom: 0, left: 0 }}\r\n      repulsivity={3}\r\n      iterations={50}\r\n      nodeColor={(node) => {\r\n        if (node.values[step] === 1) {\r\n          return \"#E23C34\"; //\"red\";\r\n        } else if (node.values[step] === 0) {\r\n          return \"gray\";\r\n        } else if (node.values[step] === -1) {\r\n          return \"#5BB2DD\"; //\"blue\";\r\n        }\r\n      }}\r\n      linkColor={(link) => {\r\n        return \"gray\";\r\n      }}\r\n      nodeBorderWidth={0}\r\n      nodeBorderColor={{ from: \"color\", modifiers: [[\"darker\", 0.8]] }}\r\n      linkThickness={(link) => {\r\n        return 2;\r\n      }}\r\n      motionStiffness={160}\r\n      motionDamping={12}\r\n    />\r\n  );\r\n};\r\n\r\n//折れ線グラフ\r\nconst LineChart = (props) => {\r\n  const step = props.nowStep;\r\n  const newNodes = props.newNodes;\r\n\r\n  const LineNodes = newNodes;\r\n  //各ステップごとの-1,0,1の数を数えるcountの作成し０で初期化\r\n  var count = { Negative: {}, Neutral: {}, Positive: {} };\r\n  for (var d = 0; d < step; d++) {\r\n    count.Negative[d] = 0;\r\n    count.Neutral[d] = 0;\r\n    count.Positive[d] = 0;\r\n  }\r\n  //countに対して、実際に-1,0,1の数を数えて代入\r\n  const valueset = Array.from(new Set(LineNodes.map(({ values }) => values)));\r\n  for (var v = 0; v < step; v++) {\r\n    for (const j of valueset) {\r\n      if (j[v] === -1) {\r\n        count.Negative[v] += 1;\r\n      } else if (j[v] === 0) {\r\n        count.Neutral[v] += 1;\r\n      } else if (j[v] === 1) {\r\n        count.Positive[v] += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  //数えられたcountに対して、それを割合に変換する\r\n  var num = 1.0;\r\n  for (var i = 0; i < 3; i++) {\r\n    for (var j = 0; j < step; j++) {\r\n      num = 1.0;\r\n      if (i === 0) {\r\n        num = (count.Negative[j] / LineNodes.length) * 100;\r\n        count.Negative[j] = Math.round(num * 10) / 10;\r\n      } else if (i === 1) {\r\n        num = (count.Neutral[j] / LineNodes.length) * 100;\r\n        count.Neutral[j] = Math.round(num * 10) / 10;\r\n      } else {\r\n        num = (count.Positive[j] / LineNodes.length) * 100;\r\n        count.Positive[j] = Math.round(num * 10) / 10;\r\n      }\r\n    }\r\n  }\r\n\r\n  //欲しいデータの形に作った配列等を代入する\r\n  const alldata = [];\r\n  function dataset() {\r\n    return Object.entries(count).map(([key, values]) => {\r\n      var stepcount = 0;\r\n      return {\r\n        id: key,\r\n        data: Object.values(values).map((d) => {\r\n          return {\r\n            x: stepcount++,\r\n            y: d,\r\n          };\r\n        }),\r\n      };\r\n    });\r\n  }\r\n  const result = dataset(alldata);\r\n\r\n  return (\r\n    <ResponsiveLine\r\n      data={result}\r\n      margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n      xScale={{ type: \"point\" }}\r\n      yScale={{\r\n        type: \"linear\",\r\n        min: 0,\r\n        max: 100,\r\n        stacked: false,\r\n        reverse: false,\r\n      }}\r\n      axisTop={null}\r\n      axisRight={null}\r\n      axisBottom={{\r\n        orient: \"bottom\",\r\n        tickSize: 5,\r\n        tickPadding: 5,\r\n        tickRotation: 0,\r\n        legend: \"TimeStep\",\r\n        legendOffset: 36,\r\n        legendPosition: \"middle\",\r\n      }}\r\n      axisLeft={{\r\n        orient: \"left\",\r\n        tickSize: 5,\r\n        tickPadding: 5,\r\n        tickRotation: 0,\r\n        legend: \"ratio\",\r\n        legendOffset: -40,\r\n        legendPosition: \"middle\",\r\n      }}\r\n      colors={(data) => {\r\n        if (data.id === \"Negative\") {\r\n          return \"#5BB2DD\"; //\"blue\";\r\n        } else if (data.id === \"Neutral\") {\r\n          return \"gray\";\r\n        } else {\r\n          return \"#E23C34\"; //\"red\";\r\n        }\r\n      }}\r\n      pointSize={10}\r\n      pointColor={{ theme: \"background\" }}\r\n      pointBorderWidth={2}\r\n      pointBorderColor={{ from: \"serieColor\" }}\r\n      pointLabel=\"y\"\r\n      pointLabelYOffset={-12}\r\n      useMesh={true}\r\n      legends={[\r\n        {\r\n          anchor: \"bottom-right\",\r\n          direction: \"column\",\r\n          justify: false,\r\n          translateX: 100,\r\n          translateY: 0,\r\n          itemsSpacing: 0,\r\n          itemDirection: \"left-to-right\",\r\n          itemWidth: 80,\r\n          itemHeight: 20,\r\n          itemOpacity: 0.75,\r\n          symbolSize: 12,\r\n          symbolShape: \"circle\",\r\n          symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n          effects: [\r\n            {\r\n              on: \"hover\",\r\n              style: {\r\n                itemBackground: \"rgba(0, 0, 0, .03)\",\r\n                itemOpacity: 1,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\n//次数の分布\r\nconst MyResponsiveScatterPlot = (props) => {\r\n  const step = props.step;\r\n  const data = props.data;\r\n  const newNodes = props.newNodes;\r\n  //const newLinks = props.newLinks;\r\n  const LineNodes = newNodes;\r\n  //各ステップごとの-1,0,1の数を数えるcountの作成し０で初期化\r\n  var count = { Negative: {}, Neutral: {}, Positive: {} };\r\n  for (var d = 0; d < step; d++) {\r\n    count.Negative[d] = 0;\r\n    count.Neutral[d] = 0;\r\n    count.Positive[d] = 0;\r\n  }\r\n  //countに対して、実際に-1,0,1の数を数えて代入\r\n  const valueset = Array.from(new Set(LineNodes.map(({ values }) => values)));\r\n  for (var v = 0; v < step; v++) {\r\n    for (const j of valueset) {\r\n      if (j[v] === -1) {\r\n        count.Negative[v] += 1;\r\n      } else if (j[v] === 0) {\r\n        count.Neutral[v] += 1;\r\n      } else if (j[v] === 1) {\r\n        count.Positive[v] += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  //数えられたcountに対して、それを割合に変換する\r\n  var num = 1.0;\r\n  for (var i = 0; i < 3; i++) {\r\n    for (var j = 0; j < step; j++) {\r\n      num = 1.0;\r\n      if (i === 0) {\r\n        num = (count.Negative[j] / LineNodes.length) * 100;\r\n        count.Negative[j] = Math.round(num * 10) / 10;\r\n      } else if (i === 1) {\r\n        num = (count.Neutral[j] / LineNodes.length) * 100;\r\n        count.Neutral[j] = Math.round(num * 10) / 10;\r\n      } else {\r\n        num = (count.Positive[j] / LineNodes.length) * 100;\r\n        count.Positive[j] = Math.round(num * 10) / 10;\r\n      }\r\n    }\r\n  }\r\n\r\n  //次数について\r\n  function Degcount(value) {\r\n    var Degc = 0;\r\n    for (const links of data.links) {\r\n      if (value.id === links.source || value.id === links.target) {\r\n        Degc++;\r\n      }\r\n    }\r\n    if (Degc > 0) {\r\n      value.Degree = Degc;\r\n      return value;\r\n    }\r\n  }\r\n  var DegNodes = [];\r\n  DegNodes = data.nodes.filter(Degcount);\r\n  DegNodes.sort(function (a, b) {\r\n    return a.Degree > b.Degree ? -1 : 1;\r\n  });\r\n  DegNodes.slice(0, 99);\r\n\r\n  //各次数の数を数える\r\n  const degreeCounts = {};\r\n  for (const DegNode of DegNodes) {\r\n    degreeCounts[DegNode.Degree] = 0;\r\n  }\r\n\r\n  for (const DegNode of DegNodes) {\r\n    degreeCounts[DegNode.Degree]++;\r\n  }\r\n\r\n  //欲しいデータの形に作った配列等を代入する\r\n  const alldata = [];\r\n  function dataset() {\r\n    return [\r\n      {\r\n        id: \"Degree\",\r\n        data: Object.entries(degreeCounts).map(([key, values]) => {\r\n          return {\r\n            x: key,\r\n            y: values / DegNodes.length,\r\n          };\r\n        }),\r\n      },\r\n    ];\r\n  }\r\n  const result = dataset(alldata);\r\n\r\n  return (\r\n    <ResponsiveScatterPlot\r\n      data={result}\r\n      margin={{ top: 60, right: 140, bottom: 70, left: 90 }}\r\n      xScale={{ type: \"log\", min: 1, max: \"auto\" }}\r\n      xFormat={function (e) {\r\n        return e + \"\";\r\n      }}\r\n      yScale={{ type: \"log\", min: 1e-5, max: 1 }}\r\n      yFormat={function (e) {\r\n        return e + \"\";\r\n      }}\r\n      blendMode=\"multiply\"\r\n      axisTop={null}\r\n      axisRight={null}\r\n      axisBottom={{\r\n        orient: \"bottom\",\r\n        tickSize: 5,\r\n        tickPadding: 5,\r\n        tickRotation: 0,\r\n        legend: \"Degree\",\r\n        legendPosition: \"middle\",\r\n        legendOffset: 46,\r\n      }}\r\n      axisLeft={{\r\n        orient: \"left\",\r\n        tickSize: 5,\r\n        tickPadding: 5,\r\n        tickRotation: 0,\r\n        legend: \"Count\",\r\n        legendPosition: \"middle\",\r\n        legendOffset: -60,\r\n        format: (index) => {\r\n          const e = index.toExponential(1);\r\n          return e.startsWith(\"1\") ? e : \"\";\r\n        },\r\n      }}\r\n      legends={[\r\n        {\r\n          anchor: \"bottom-right\",\r\n          direction: \"column\",\r\n          justify: false,\r\n          translateX: 130,\r\n          translateY: 0,\r\n          itemWidth: 100,\r\n          itemHeight: 12,\r\n          itemsSpacing: 5,\r\n          itemDirection: \"left-to-right\",\r\n          symbolSize: 12,\r\n          symbolShape: \"circle\",\r\n          effects: [\r\n            {\r\n              on: \"hover\",\r\n              style: {\r\n                itemOpacity: 1,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\n//左側コンポーネント\r\nconst App = () => {\r\n  let positiveEl = useRef(null);\r\n  let negativeEl = useRef(null);\r\n  let percentEl = useRef(null);\r\n  let currentStep = 50;\r\n  const [nowStep, setnowStep] = useState(50);\r\n  const [step, setStep] = useState(50);\r\n\r\n  const handleChange = (event) => {\r\n    event.preventDefault();\r\n    currentStep = +event.target.value;\r\n    console.log(\"handleChange\" + currentStep);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setStep(+event.target.elements.step.value);\r\n    console.log(\"handleSubmit\" + event.target.elements.step.value);\r\n  };\r\n\r\n  //data set\r\n  const [data, setData] = useState({ nodes: [], links: [] });\r\n  useEffect(() => {\r\n    window\r\n      .fetch(\"all.json\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        for (const node of data.nodes) {\r\n          node.id = node.id.toString();\r\n          node.radius = 5;\r\n        }\r\n        for (const link of data.links) {\r\n          link.color = \"gray\";\r\n          link.source = link.source.toString();\r\n          link.target = link.target.toString();\r\n          link.distance = 20;\r\n        }\r\n        setData(data);\r\n      });\r\n  }, []);\r\n\r\n  const newLinks = data.links.filter(function (item, index) {\r\n    if (item.weight >= 5) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  function check(value) {\r\n    for (const links of newLinks) {\r\n      if (value.id === links.source || value.id === links.target) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  const newNodes = data.nodes.filter(check);\r\n  console.log(newNodes);\r\n\r\n  //次数について\r\n  function Degcount(value) {\r\n    var Degc = 0;\r\n    for (const links of newLinks) {\r\n      if (value.id === links.source || value.id === links.target) {\r\n        Degc++;\r\n      }\r\n    }\r\n    if (Degc > 1) {\r\n      value.Degree = Degc;\r\n      return value;\r\n    }\r\n  }\r\n  var DegNodes = [];\r\n  DegNodes = data.nodes.filter(Degcount);\r\n  DegNodes.sort(function (a, b) {\r\n    return a.Degree > b.Degree ? -1 : 1;\r\n  });\r\n  DegNodes.slice(0, 99);\r\n\r\n  const options = DegNodes.map((value) => {\r\n    return <option value={value.id}>{value.name}</option>;\r\n  });\r\n  const percents = [0, 25, 50, 75, 100];\r\n  const perOptions = percents.map((value) => {\r\n    return <option value={value}>{value}</option>;\r\n  });\r\n\r\n  //onClick時　選択されたidを取得\r\n\r\n  const clickButton = () => {\r\n    handleClickEvent(currentStep);\r\n  };\r\n\r\n  const handleClickEvent = (currentStep) => {\r\n    console.log(data);\r\n    console.log(\"simu\" + currentStep);\r\n    setStep(currentStep);\r\n    setnowStep(currentStep);\r\n    console.log(currentStep);\r\n    var percent;\r\n    var positiveIds = [];\r\n    var negativeIds = [];\r\n    for (const option of percentEl.current.options) {\r\n      if (option.selected === true) {\r\n        percent = option.value;\r\n      }\r\n    }\r\n\r\n    for (const option of positiveEl.current.options) {\r\n      if (option.selected === true) {\r\n        positiveIds.push(option.value);\r\n      }\r\n    }\r\n\r\n    for (const option of negativeEl.current.options) {\r\n      if (option.selected === true) {\r\n        negativeIds.push(option.value);\r\n      }\r\n    }\r\n    const newData = simulation(data, positiveIds, negativeIds, percent, step);\r\n    setData(newData);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <head>\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css\"\r\n        ></link>\r\n      </head>\r\n\r\n      {/*ヘッダー*/}\r\n\r\n      <section className=\"hero is-warning\">\r\n        <div className=\"hero-body\">\r\n          <h1 className=\"title\">Negative・Positiveの拡散シミュレーション</h1>\r\n          <h2 className=\"subtitle\">\r\n            佐野幸恵らの「SNSにおける福島原発事故後の放射線情報拡散シミュレーション」\r\n            で収集された放射線に関するツイートデータを用いています。\r\n            データのRT関連データを作成し、３つのシミュレーションを行います。\r\n          </h2>\r\n        </div>\r\n      </section>\r\n\r\n      {/*tile*/}\r\n      <section className=\"section\">\r\n        <div className=\"tile is-ancestor\">\r\n          {/*詳細設定 */}\r\n          <div className=\"tile is-2\">\r\n            <article className=\"tile is-child notification\">\r\n              <p className=\"title\">詳細設定</p>\r\n              <p className=\"subtitle\">\r\n                4つの項目の詳細を設定し、Startボタンを押してください。\r\n                シミュレーションが開始されます。\r\n              </p>\r\n\r\n              <div className=\"field\">\r\n                <label className=\"label\">Positive</label>\r\n                <div className=\"control\">\r\n                  <div className=\"select is-multiple is-fullwidth\">\r\n                    <select multiple ref={positiveEl}>\r\n                      {options}\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <p className=\"help\">Ctrlで複数選択可能</p>\r\n              </div>\r\n\r\n              <div className=\"field\">\r\n                <label className=\"label\">Negative</label>\r\n                <div className=\"control\">\r\n                  <div className=\"select is-multiple is-fullwidth\">\r\n                    <select multiple ref={negativeEl}>\r\n                      {options}\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n                <p className=\"help\">Ctrlで複数選択可能</p>\r\n              </div>\r\n              {/*シミュレーションstep*/}\r\n              <div className=\"field \">\r\n                <label className=\"label\">Step</label>\r\n                <div class=\"control\">\r\n                  <form onChange={handleChange}>\r\n                    <input\r\n                      className=\"input\"\r\n                      name=\"step\"\r\n                      type=\"number\"\r\n                      defaultValue={step}\r\n                    />\r\n                  </form>\r\n                </div>\r\n                <p className=\"help\">{nowStep}stepまでシミュレーションを行う</p>\r\n              </div>\r\n\r\n              <div className=\"field\">\r\n                <label className=\"label\">ルール１：投票Model</label>\r\n                {/*選択肢ボタン*/}\r\n                <div className=\"control\">\r\n                  <div className=\"select is-fullwidth\">\r\n                    <select ref={percentEl}>{perOptions}</select>\r\n                  </div>\r\n                </div>\r\n                <p className=\"help\">自分の意思を0~100%の割合で反映します</p>\r\n              </div>\r\n\r\n              <div className=\"field\">\r\n                <div className=\"control\">\r\n                  <button\r\n                    className=\"button is-danger is-active is-large is-fullwidth\"\r\n                    onClick={clickButton}\r\n                  >\r\n                    Start\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </article>\r\n          </div>\r\n          {/*可視化結果*/}\r\n          <div className=\"tile is-parent is-vertical \">\r\n            <article className=\"tile is-child notification is-white\">\r\n              <p className=\"title\">ネットワーク</p>\r\n              <p className=\"subtitle\">\r\n                PositiveとNegativeに関するネットワーク図です。\r\n                下のステップ数を変更する事で、各ステップのシミュレーションを見る事ができます。\r\n                <br></br>\r\n                赤色は「正しい情報を知っている状態( Positive )」です。灰色は\r\n                「何も知らない状態( Neutral )」\r\n                です。青色は「デマを信じている状態( Negative )」です。\r\n                「weight(RT回数)」が5以下のものと、孤立ノードは予め取り除いています。\r\n              </p>\r\n\r\n              <div className=\"field\">\r\n                <form onSubmit={handleSubmit}>\r\n                  <div className=\"control\">\r\n                    <div className=\"field has-addons\">\r\n                      <div className=\"control\">\r\n                        <input\r\n                          className=\"input\"\r\n                          name=\"step\"\r\n                          type=\"number\"\r\n                          defaultValue={step}\r\n                        />\r\n                      </div>\r\n                      <div className=\"control\">\r\n                        <button className=\"button is-light\" type=\"submit\">\r\n                          ステップ数を変更する！\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <p className=\"help\">現在のステップ数 {step}</p>\r\n                </form>\r\n              </div>\r\n\r\n              <figure className=\"image is-square \">\r\n                <div className=\"has-ratio\" width=\"1000\" height=\"1000\">\r\n                  <NetworkChart\r\n                    step={step}\r\n                    newNodes={newNodes}\r\n                    newLinks={newLinks}\r\n                  />\r\n                </div>\r\n              </figure>\r\n            </article>\r\n          </div>\r\n          <div className=\"tile  is-vertical is-parent \">\r\n            <article className=\"tile  is-vertical is-child notification is-white\">\r\n              <p className=\"title\">折れ線グラフ</p>\r\n              <p className=\"subtitle\">\r\n                各タイムステップに対し、ノード数の割合を見る事ができます。\r\n                横軸が「各タイムステップ」、縦軸が「全体を１とした時の割合」です。\r\n                <br></br>\r\n                ※全体を１としています\r\n              </p>\r\n              <figure className=\"image is-2by1\">\r\n                <div className=\"has-ratio\" width=\"1000\" height=\"500\">\r\n                  <LineChart\r\n                    step={step}\r\n                    nowStep={nowStep}\r\n                    newNodes={newNodes}\r\n                    newLinks={newLinks}\r\n                  />\r\n                </div>\r\n              </figure>\r\n            </article>\r\n            <article className=\"tile  is-vertical is-child notification is-white\">\r\n              <p className=\"title\">次数分布</p>\r\n              <p className=\"subtitle\">\r\n                次数に関した分布をみる事がでます。\r\n                横軸が「次数」、縦軸が「割合」です。\r\n              </p>\r\n              <figure className=\"image is-2by1\">\r\n                <div className=\"has-ratio\" width=\"1000\" height=\"500\">\r\n                  <MyResponsiveScatterPlot\r\n                    step={step}\r\n                    data={data}\r\n                    newNodes={newNodes}\r\n                    newLinks={newLinks}\r\n                  />\r\n                </div>\r\n              </figure>\r\n            </article>\r\n          </div>\r\n        </div>\r\n        {/*tile*/}\r\n      </section>\r\n      <footer className=\"footer is-warning\">\r\n        <div className=\"content has-text-centered\">\r\n          <p>&copy; 2020 船木駿之介, 望月沙和</p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\nrender(<App />, document.querySelector(\"#content\"));\r\n","export const simulation = (graph, positiveIds, negativeIds, percent, step) => {\r\n  for (const node of graph.nodes) {\r\n    node.values[0] = 0;\r\n  }\r\n\r\n  for (const node of graph.nodes) {\r\n    for (const positiveId of positiveIds) {\r\n      if (positiveId === node.id) {\r\n        node.values[0] = 1;\r\n      }\r\n    }\r\n    for (const negativeId of negativeIds) {\r\n      if (negativeId === node.id) {\r\n        node.values[0] = -1;\r\n      }\r\n    }\r\n  }\r\n\r\n  const adjacencyLists = {};\r\n  for (const node of graph.nodes) {\r\n    adjacencyLists[node.id] = [];\r\n  }\r\n  for (const link of graph.links) {\r\n    adjacencyLists[link.source].push(link.target);\r\n    adjacencyLists[link.target].push(link.source);\r\n  }\r\n  //step数まで行う\r\n  const nodes = {};\r\n  for (const node of graph.nodes) {\r\n    nodes[node.id] = node;\r\n  }\r\n  let remainPercent = 100 - percent; //残りの割合\r\n\r\n  for (let i = 1; i <= step; i++) {\r\n    for (const node of graph.nodes) {\r\n      let count = 0;\r\n      let links = adjacencyLists[node.id].length;\r\n      count += (node.values[i - 1] / (links + 1)) * percent;\r\n      for (const id of adjacencyLists[node.id]) {\r\n        const node2 = nodes[id];\r\n        let calc = remainPercent / (links + 1);\r\n        if (node2.values[i - 1] === 1) {\r\n          count += 1 * calc;\r\n        } else if (node2.values[i - 1] === -1) {\r\n          count -= 1 * calc;\r\n        }\r\n      }\r\n      if (count > 0) {\r\n        node.values[i] = 1;\r\n      } else if (count < 0) {\r\n        node.values[i] = -1;\r\n      } else {\r\n        node.values[i] = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  return Object.assign({}, graph);\r\n};\r\n"],"sourceRoot":""}